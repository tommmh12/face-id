import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/dto/payroll_dtos.dart';
import 'api_service.dart';

class PayrollApiService extends BaseApiService {
  static const String _endpoint = '/payroll';

  // ==================== PAYROLL PERIOD ====================

  /// POST /api/payroll/periods
  /// T·∫°o k·ª≥ l∆∞∆°ng m·ªõi (Th√°ng)
  Future<ApiResponse<PayrollPeriodResponse>> createPayrollPeriod(CreatePayrollPeriodRequest request) async {
    final httpRequest = http.post(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/periods'),
      headers: ApiConfig.headers,
      body: json.encode(request.toJson()),
    );

    return handleRequest(httpRequest, (json) => PayrollPeriodResponse.fromJson(json));
  }

  /// GET /api/payroll/periods
  /// L·∫•y danh s√°ch t·∫•t c·∫£ k·ª≥ l∆∞∆°ng
  Future<ApiResponse<List<PayrollPeriodResponse>>> getPayrollPeriods() async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/periods'),
      headers: ApiConfig.headers,
    );

    return handleListRequest(request, (json) => PayrollPeriodResponse.fromJson(json));
  }

  /// GET /api/payroll/periods/{id}
  /// L·∫•y th√¥ng tin k·ª≥ l∆∞∆°ng theo ID
  Future<ApiResponse<PayrollPeriodResponse>> getPayrollPeriodById(int id) async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/periods/$id'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => PayrollPeriodResponse.fromJson(json));
  }

  // ==================== PAYROLL RULE ====================

  /// POST /api/payroll/rules
  /// T·∫°o ho·∫∑c c·∫≠p nh·∫≠t quy t·∫Øc t√≠nh l∆∞∆°ng cho nh√¢n vi√™n
  Future<ApiResponse<PayrollRuleResponse>> createOrUpdatePayrollRule(CreatePayrollRuleRequest request) async {
    final httpRequest = http.post(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/rules'),
      headers: ApiConfig.headers,
      body: json.encode(request.toJson()),
    );

    return handleRequest(httpRequest, (json) => PayrollRuleResponse.fromJson(json));
  }

  /// GET /api/payroll/rules/employee/{employeeId}
  /// L·∫•y quy t·∫Øc t√≠nh l∆∞∆°ng c·ªßa nh√¢n vi√™n
  Future<ApiResponse<PayrollRuleResponse>> getPayrollRuleByEmployeeId(int employeeId) async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/rules/employee/$employeeId'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => PayrollRuleResponse.fromJson(json));
  }

  /// GET /api/payroll/rules
  /// L·∫•y t·∫•t c·∫£ quy t·∫Øc t√≠nh l∆∞∆°ng
  Future<ApiResponse<List<PayrollRuleResponse>>> getAllPayrollRules() async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/rules'),
      headers: ApiConfig.headers,
    );

    return handleListRequest(request, (json) => PayrollRuleResponse.fromJson(json));
  }

  // ==================== ALLOWANCE ====================

  /// POST /api/payroll/allowances
  /// T·∫°o ph·ª• c·∫•p ho·∫∑c kh·∫•u tr·ª´ cho nh√¢n vi√™n
  Future<ApiResponse<AllowanceResponse>> createAllowance(CreateAllowanceRequest request) async {
    final httpRequest = http.post(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/allowances'),
      headers: ApiConfig.headers,
      body: json.encode(request.toJson()),
    );

    return handleRequest(httpRequest, (json) => AllowanceResponse.fromJson(json));
  }

  /// GET /api/payroll/allowances/employee/{employeeId}
  /// L·∫•y danh s√°ch ph·ª• c·∫•p/kh·∫•u tr·ª´ c·ªßa nh√¢n vi√™n
  Future<ApiResponse<List<AllowanceResponse>>> getEmployeeAllowances(int employeeId) async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/allowances/employee/$employeeId'),
      headers: ApiConfig.headers,
    );

    return handleListRequest(request, (json) => AllowanceResponse.fromJson(json));
  }

  // ==================== PAYROLL GENERATION (CORE) ====================

  /// POST /api/payroll/generate/{periodId}
  /// üî• MAIN ENDPOINT: T√≠nh l∆∞∆°ng cho t·∫•t c·∫£ nh√¢n vi√™n trong k·ª≥
  /// √Åp d·ª•ng 6 b∆∞·ªõc logic: Ch·∫•m c√¥ng -> OT -> Gross -> BH -> PIT -> Net
  Future<ApiResponse<GeneratePayrollResponse>> generatePayroll(int periodId) async {
    final request = http.post(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/generate/$periodId'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => GeneratePayrollResponse.fromJson(json));
  }

  // ==================== PAYROLL REPORTS ====================

  /// GET /api/payroll/summary/{periodId}
  /// L·∫•y t·ªïng h·ª£p b·∫£ng l∆∞∆°ng (Summary) c·ªßa k·ª≥
  Future<ApiResponse<PayrollSummaryResponse>> getPayrollSummary(int periodId) async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/summary/$periodId'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => PayrollSummaryResponse.fromJson(json));
  }

  /// GET /api/payroll/records/period/{periodId}/employee/{employeeId}
  /// L·∫•y b·∫£ng l∆∞∆°ng c·ªßa 1 nh√¢n vi√™n trong k·ª≥
  Future<ApiResponse<PayrollRecordResponse>> getEmployeePayroll(int periodId, int employeeId) async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/records/period/$periodId/employee/$employeeId'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => PayrollRecordResponse.fromJson(json));
  }

  // ==================== UTILITIES ====================

  /// GET /api/payroll/health
  /// Health check endpoint
  Future<ApiResponse<Map<String, dynamic>>> healthCheck() async {
    final request = http.get(
      Uri.parse('${ApiConfig.baseUrl}$_endpoint/health'),
      headers: ApiConfig.headers,
    );

    return handleRequest(request, (json) => json);
  }
}